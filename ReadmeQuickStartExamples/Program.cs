using System;
using System.Linq;
using System.Security.Cryptography.X509Certificates;

namespace Axinom.Cpix.ReadmeQuickStartExamples
{
	class Program
	{
		static void Main(string[] args)
		{
			// Here we hold the code for the quick start examples in the readme file, to validate that the code works.

			Console.WriteLine("EXAMPLE: Writing CPIX");
			WritingCpixExample();

			Console.WriteLine("EXAMPLE: Reading CPIX");
			ReadingCpixExample();

			Console.WriteLine("EXAMPLE: Modifying CPIX");
			ModifyingCpixExample();

			Console.WriteLine("EXAMPLE: Mapping content keys.");
			MappingContentKeysExample();
		}

		private static void WritingCpixExample()
		{
			var document = new CpixDocument();
			// Let's create a CPIX document with two content keys.

			document.ContentKeys.Add(new ContentKey
			{
				Id = Guid.NewGuid(),
				Value = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6 }
			});
			document.ContentKeys.Add(new ContentKey
			{
				Id = Guid.Parse("f8c80c25-690f-4736-8132-430e5c6994ce"),
				Value = new byte[] { 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5 }
			});

			// Let's also add Widevine and PlayReady signaling data and associate it
			// with the second content key.
			document.DrmSystems.Add(new DrmSystem
			{
				Id = Guid.Parse("edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"),
				KeyId = document.ContentKeys.ElementAt(1).Id,
				ContentProtectionData = "PGNlbmM6cHNzaCB4bWxuczpjZW5jPSJ1cm46bXBlZzpjZW5jOjIwMTMiPkFBQUFOSEJ6YzJnQUFBQUE3ZStMcVhuV1NzNmp5Q2ZjMVIwaDdRQUFBQlFJQVJJUStNZ01KV2tQUnphQk1rTU9YR21Vemc9PTwvY2VuYzpwc3NoPg=="
			});
			document.DrmSystems.Add(new DrmSystem
			{
				Id = Guid.Parse("9a04f079-9840-4286-ab92-e65be0885f95"),
				KeyId = document.ContentKeys.ElementAt(1).Id,
				ContentProtectionData = "PGNlbmM6cHNzaCB4bWxuczpjZW5jPSJ1cm46bXBlZzpjZW5jOjIwMTMiPkFBQUI1SEJ6YzJnQUFBQUFtZ1R3ZVpoQVFvYXJrdVpiNEloZmxRQUFBY1RFQVFBQUFRQUJBTG9CUEFCWEFGSUFUUUJJQUVVQVFRQkVBRVVBVWdBZ0FIZ0FiUUJzQUc0QWN3QTlBQ0lBYUFCMEFIUUFjQUE2QUM4QUx3QnpBR01BYUFCbEFHMEFZUUJ6QUM0QWJRQnBBR01BY2dCdkFITUFid0JtQUhRQUxnQmpBRzhBYlFBdkFFUUFVZ0JOQUM4QU1nQXdBREFBTndBdkFEQUFNd0F2QUZBQWJBQmhBSGtBVWdCbEFHRUFaQUI1QUVnQVpRQmhBR1FBWlFCeUFDSUFJQUIyQUdVQWNnQnpBR2tBYndCdUFEMEFJZ0EwQUM0QU1BQXVBREFBTGdBd0FDSUFQZ0E4QUVRQVFRQlVBRUVBUGdBOEFGQUFVZ0JQQUZRQVJRQkRBRlFBU1FCT0FFWUFUd0ErQUR3QVN3QkZBRmtBVEFCRkFFNEFQZ0F4QURZQVBBQXZBRXNBUlFCWkFFd0FSUUJPQUQ0QVBBQkJBRXdBUndCSkFFUUFQZ0JCQUVVQVV3QkRBRlFBVWdBOEFDOEFRUUJNQUVjQVNRQkVBRDRBUEFBdkFGQUFVZ0JQQUZRQVJRQkRBRlFBU1FCT0FFWUFUd0ErQUR3QVN3QkpBRVFBUGdCS0FGRUFlZ0JKQUNzQVFRQTVBSEFBVGdCckFHVUFRZ0JOQUdzQVRRQlBBRmdBUndCdEFGVUFlZ0JuQUQwQVBRQThBQzhBU3dCSkFFUUFQZ0E4QUM4QVJBQkJBRlFBUVFBK0FEd0FMd0JYQUZJQVRRQklBRVVBUVFCRUFFVUFVZ0ErQUE9PTwvY2VuYzpwc3NoPg0KPHBybyB4bWxucz0idXJuOm1pY3Jvc29mdDpwbGF5cmVhZHkiPnhBRUFBQUVBQVFDNkFUd0FWd0JTQUUwQVNBQkZBRUVBUkFCRkFGSUFJQUI0QUcwQWJBQnVBSE1BUFFBaUFHZ0FkQUIwQUhBQU9nQXZBQzhBY3dCakFHZ0FaUUJ0QUdFQWN3QXVBRzBBYVFCakFISUFid0J6QUc4QVpnQjBBQzRBWXdCdkFHMEFMd0JFQUZJQVRRQXZBRElBTUFBd0FEY0FMd0F3QURNQUx3QlFBR3dBWVFCNUFGSUFaUUJoQUdRQWVRQklBR1VBWVFCa0FHVUFjZ0FpQUNBQWRnQmxBSElBY3dCcEFHOEFiZ0E5QUNJQU5BQXVBREFBTGdBd0FDNEFNQUFpQUQ0QVBBQkVBRUVBVkFCQkFENEFQQUJRQUZJQVR3QlVBRVVBUXdCVUFFa0FUZ0JHQUU4QVBnQThBRXNBUlFCWkFFd0FSUUJPQUQ0QU1RQTJBRHdBTHdCTEFFVUFXUUJNQUVVQVRnQStBRHdBUVFCTUFFY0FTUUJFQUQ0QVFRQkZBRk1BUXdCVUFGSUFQQUF2QUVFQVRBQkhBRWtBUkFBK0FEd0FMd0JRQUZJQVR3QlVBRVVBUXdCVUFFa0FUZ0JHQUU4QVBnQThBRXNBU1FCRUFENEFTZ0JSQUhvQVNRQXJBRUVBT1FCd0FFNEFhd0JsQUVJQVRRQnJBRTBBVHdCWUFFY0FiUUJWQUhvQVp3QTlBRDBBUEFBdkFFc0FTUUJFQUQ0QVBBQXZBRVFBUVFCVUFFRUFQZ0E4QUM4QVZ3QlNBRTBBU0FCRkFFRUFSQUJGQUZJQVBnQT08L3Bybz4="
			});

			using (var myCertificateAndPrivateKey = new X509Certificate2("Cert1.pfx", "Cert1"))
			using (var recipientCertificate = new X509Certificate2("Cert2.cer"))
			{
				// Optional: we sign the list added elements to and also the document as a whole.
				document.ContentKeys.AddSignature(myCertificateAndPrivateKey);
				document.SignedBy = myCertificateAndPrivateKey;

				// Optional: the presence of recipients will automatically mark the content keys to be encrypted on save.
				document.Recipients.Add(new Recipient(recipientCertificate));

				document.Save("cpix.xml");
			}
		}

		private static void ReadingCpixExample()
		{
			// A suitable input document is the one generated by the "writing CPIX" quick start example.

			CpixDocument document;

			// Optional: any private keys referenced by the certificate(s) you provide to Load() will be used for
			// decrypting any encrypted content keys. Even if you do not have a matching private key, the document
			// will still be successfully loaded but you will simply not have access to the values of the content keys.
			using (var myCertificateAndPrivateKey = new X509Certificate2("Cert2.pfx", "Cert2"))
				document = CpixDocument.Load("cpix.xml", myCertificateAndPrivateKey);

			if (document.ContentKeysAreReadable)
				Console.WriteLine("We have access to the content key values.");
			else
				Console.WriteLine("The content keys are encrypted and we do not have a delivery key.");

			var firstKey = document.ContentKeys.FirstOrDefault();
			var firstSignerOfKeys = document.ContentKeys.SignedBy.FirstOrDefault();

			if (firstKey != null)
				Console.WriteLine("First content key ID: " + firstKey.Id);
			else
				Console.WriteLine("No content keys in document.");

			if (firstSignerOfKeys != null)
				Console.WriteLine("Content keys first signed by: " + firstSignerOfKeys.SubjectName.Format(false));
			else
				Console.WriteLine("The content keys collection was not signed.");

			if (document.SignedBy != null)
				Console.WriteLine("Document signed by: " + document.SignedBy.SubjectName.Format(false));
			else
				Console.WriteLine("The document as a whole was not signed.");
		}

		private static void ModifyingCpixExample()
		{
			// Scenario: we take an input document containing some content keys and define usage rules for those keys.
			// A suitable input document is the one generated by the "writing CPIX" quick start example.

			var document = CpixDocument.Load("cpix.xml");

			if (document.ContentKeys.Count() < 2)
				throw new Exception("This example assumes at least 2 content keys to be present in the CPIX document.");

			// We are modifying the document, so we must first remove any document signature.
			document.SignedBy = null;

			// We are going to add some usage rules, so remove any signature on usage rules.
			document.UsageRules.RemoveAllSignatures();

			// If any usage rules already exist, get rid of them all.
			document.UsageRules.Clear();

			// Assign the first content key to all audio streams.
			document.UsageRules.Add(new UsageRule
			{
				KeyId = document.ContentKeys.First().Id,

				AudioFilters = new[] { new AudioFilter() }
			});

			// Assign the second content key to all video streams.
			document.UsageRules.Add(new UsageRule
			{
				KeyId = document.ContentKeys.Skip(1).First().Id,

				VideoFilters = new[] { new VideoFilter() }
			});

			// Save all changes. Note that we do not sign or re-sign anything in this example (although we could).
			document.Save("cpix.xml");
		}

		private static void MappingContentKeysExample()
		{
			// Scenario: we take a CPIX document with content keys and usage rules for audio and video.
			// Then we map these content keys to content key contexts containing audio and video that we want to encrypt.
			// A suitable input document is the one generated by the "modifying CPIX" quick start example.

			CpixDocument document;

			using (var myCertificateAndPrivateKey = new X509Certificate2("Cert2.pfx", "Cert2"))
				document = CpixDocument.Load("cpix.xml", myCertificateAndPrivateKey);

			if (!document.ContentKeysAreReadable)
				throw new Exception("The content keys were encrypted and we did not have a delivery key.");

			// Let's imagine we have stereo audio at 32 kbps.
			var audioKey = document.ResolveContentKey(new ContentKeyContext
			{
				Type = ContentKeyContextType.Audio,

				Bitrate = 32 * 1000,
				AudioChannelCount = 2
			});

			// Let's imagine we have both SD and HD video.
			var sdVideoKey = document.ResolveContentKey(new ContentKeyContext
			{
				Type = ContentKeyContextType.Video,

				Bitrate = 1 * 1000 * 1000,
				PicturePixelCount = 640 * 480,
				WideColorGamut = false,
				HighDynamicRange = false,
				VideoFramesPerSecond = 30
			});

			var hdVideoKey = document.ResolveContentKey(new ContentKeyContext
			{
				Type = ContentKeyContextType.Video,

				Bitrate = 4 * 1000 * 1000,
				PicturePixelCount = 1920 * 1080,
				WideColorGamut = false,
				HighDynamicRange = false,
				VideoFramesPerSecond = 30
			});

			Console.WriteLine("Key to use for audio: " + audioKey.Id);
			Console.WriteLine("Key to use for SD video: " + sdVideoKey.Id);
			Console.WriteLine("Key to use for HD video: " + hdVideoKey.Id);
		}
	}
}
